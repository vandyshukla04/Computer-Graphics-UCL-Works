function setup()
{
	UI = {};
	UI.tabs = [];
	UI.titleLong = 'Ray Tracer';
	UI.titleShort = 'RayTracerSimple';
	UI.numFrames = 1000;
	UI.maxFPS = 24;
	UI.renderWidth = 800;
	UI.renderHeight = 400;

	UI.tabs.push(
		{
		visible: true,
		type: `x-shader/x-fragment`,
		title: `RaytracingDemoFS - GL`,
		id: `RaytracingDemoFS`,
		initialValue: `//Ray Tracing Coursework
precision highp float;

struct PointLight {
	vec3 position;
	vec3 color;
};

struct Material {
	vec3  diffuse;
	vec3  specular;
	float glossiness;
	float transmittance;//describes whether object is transparent or opaque, transmittance is 0.0 for opaque objects. we use this property for refraction
	float IOR;//index of refraction of material, has been added for glass in the materials as first a check for transmittance is done and then IOR is used
	
};

struct Sphere {
	vec3 position;
	float radius;
	Material material;
};

struct Plane {
	vec3 normal;
	float d;
	Material material;
};

struct Cylinder {
	vec3 position;
	vec3 direction;  
	float radius;
	Material material;
};

const int lightCount = 2;
const int sphereCount = 3;
const int planeCount = 1;
const int cylinderCount = 2;

struct Scene {
	vec3 ambient;
	PointLight[lightCount] lights;
	Sphere[sphereCount] spheres;
	Plane[planeCount] planes;
	Cylinder[cylinderCount] cylinders;
};

struct Ray {
	vec3 origin;
	vec3 direction;
};

// Contains all information pertaining to a ray/object intersection
struct HitInfo {
	bool hit;
	float t;
	vec3 position;
	vec3 normal;
	Material material;
};

HitInfo getEmptyHit() {
	return HitInfo(
		false, 
		0.0, 
		vec3(0.0), 
		vec3(0.0), 
		Material(vec3(0.0), vec3(0.0), 0.0,0.0,0.0)
		
	);
}

// Sorts the two t values such that t1 is smaller than t2
void sortT(inout float t1, inout float t2) {
	// Make t1 the smaller t
	if(t2 < t1)  {
		float temp = t1;
		t1 = t2;
		t2 = temp;
	}
}

// Tests if t is in an interval
bool isTInInterval(const float t, const float tMin, const float tMax) {
	return t > tMin && t < tMax;
}

// Get the smallest t in an interval
bool getSmallestTInInterval(float t0, float t1, const float tMin, const float tMax, inout float smallestTInInterval) {

	sortT(t0, t1);

	// As t0 is smaller, test this first
	if(isTInInterval(t0, tMin, tMax)) {
		smallestTInInterval = t0;
		return true;
	}

	// If t0 was not in the interval, still t1 could be
	if(isTInInterval(t1, tMin, tMax)) {
		smallestTInInterval = t1;
		return true;
	}  

	// None was
	return false;
}

HitInfo intersectSphere(const Ray ray, const Sphere sphere, const float tMin, const float tMax) {

	vec3 toSphere = ray.origin - sphere.position;

	float polynomialA = dot(ray.direction, ray.direction);
	float polynomialB = 2.0 * dot(ray.direction, toSphere);
	float polynomialC  = dot(toSphere, toSphere) - sphere.radius * sphere.radius;
	
	float discriminant = polynomialB * polynomialB - 4.0 * polynomialA * polynomialC;
	if (discriminant > 0.0) {
		float t0 = (-polynomialB + sqrt(discriminant)) / (2.0 * polynomialA);
		float t1 = (-polynomialB - sqrt(discriminant)) / (2.0 * polynomialA);

		float smallestTInInterval;
		if(!getSmallestTInInterval(t0, t1, tMin, tMax, smallestTInInterval)) {
			return getEmptyHit();
		}

		vec3 hitPosition = ray.origin + smallestTInInterval * ray.direction;      

		vec3 normal = 
			length(ray.origin - sphere.position) < sphere.radius + 0.001? 
			-normalize(hitPosition - sphere.position) : 
		normalize(hitPosition - sphere.position);      

		return HitInfo(
			true,
			smallestTInInterval,
			hitPosition,
			normal,
			sphere.material);
	}
	return getEmptyHit();
}

HitInfo intersectPlane(const Ray ray,const Plane plane, const float tMin, const float tMax) {
	//we intersect a ray (P0+Vt) with a plane (P.N+d)
	//here P0 is the ray origin, V is the ray direction, P is a point on the plane, N is the normal from the plane
	//we put the equation of ray instead of the point P in the plane to find the point where the ray hits by solving for t
	//t is given by(-P0.N+d)/V.N
	float num=dot(ray.origin,plane.normal)+plane.d;
    float denom=dot(ray.direction,plane.normal);
    float t=-num/denom;

	//we check if point of intersection lies within tmin and tmax window
		if(!isTInInterval(t,tMin,tMax)) {
			return getEmptyHit();
		}
	//calculate hit position by ray by the scalar t in the ray direction from ray's origin
		vec3 hitPosition = ray.origin + t * ray.direction;     
	//calculate the normal on the plane from the point of intersection
	vec3 normal_ray = normalize(plane.normal*(ray.origin-hitPosition));
	
	return HitInfo(
			true,
			t,
			hitPosition,
			normal_ray,
			plane.material);
	
}

float lengthSquared(vec3 x) {
	return dot(x, x);
}

HitInfo intersectCylinder(const Ray ray, const Cylinder cylinder, const float tMin, const float tMax) {
	//we intersect a ray (P0+V0t) with a cylinder to solve for t
	//the equation of a cylinder oriented along P+Vt with a point Q on cylinder is (Q-P-(V.Q-P)V)^2=r^2 where r is the radius of the cylinder
	//we get the following values of quadratic coefficients At^2+Bt+C to later solve for t
	
	vec3 del_p=ray.origin-cylinder.position;//del_p is a term that is used in the calculation of A,B,C. We calculate it here for easier usage in the formulae. it's value is P0-P
	
	//A=(V0-((V.V0)V))^2
	float A=lengthSquared(ray.direction-(dot(ray.direction,cylinder.direction)*cylinder.direction));
	//B=2(V0-((V.V0)V),del_p-(del_p.V0)V0)
	float B=2.0*dot((ray.direction-(dot(ray.direction,cylinder.direction)*cylinder.direction)),(del_p-(dot(del_p,cylinder.direction)*cylinder.direction)));
	//C=(del_p-(del_p.V0)V0)^2
	float C=lengthSquared(del_p-(dot(del_p,cylinder.direction)*cylinder.direction))-cylinder.radius*cylinder.radius;
	
	//find the two roots of quadratic
	float discriminant = B * B - 4.0 * A * C;
	if (discriminant > 0.0) {
		float t0 = (-B + sqrt(discriminant)) / (2.0 * A);
		float t1 = (-B - sqrt(discriminant)) / (2.0 * A);

		////we check if point of intersection lies within tmin and tmax window and also the root which is closer to the camera
		float smallestTInInterval;
		if(!getSmallestTInInterval(t0, t1, tMin, tMax, smallestTInInterval)) {
			return getEmptyHit();
		}
		
		//calculate hit position by ray by the scalar t in the ray direction from ray's origin
		vec3 hitPosition = ray.origin + smallestTInInterval * ray.direction;
		
		//calculate the normal on the cylinder at the point of intersection
		vec3 normal = normalize((hitPosition-cylinder.position)-(dot(cylinder.direction,(hitPosition-cylinder.position))*cylinder.direction));
		
		return HitInfo(
			true,
			smallestTInInterval,
			hitPosition,
			normal,
			cylinder.material);
		
	}return getEmptyHit();
}

HitInfo getBetterHitInfo(const HitInfo oldHitInfo, const HitInfo newHitInfo) {
	if(newHitInfo.hit)
		if(newHitInfo.t < oldHitInfo.t)  // No need to test for the interval, this has to be done per-primitive
			return newHitInfo;
	return oldHitInfo;
}

HitInfo intersectScene(const Scene scene, const Ray ray, const float tMin, const float tMax) {
	HitInfo bestHitInfo;
	bestHitInfo.t = tMax;
	bestHitInfo.hit = false;
	for (int i = 0; i < cylinderCount; ++i) {
		bestHitInfo = getBetterHitInfo(bestHitInfo, intersectCylinder(ray, scene.cylinders[i], tMin, tMax));
	}
	for (int i = 0; i < sphereCount; ++i) {
		bestHitInfo = getBetterHitInfo(bestHitInfo, intersectSphere(ray, scene.spheres[i], tMin, tMax));
	}
	for (int i = 0; i < planeCount; ++i) {
		bestHitInfo = getBetterHitInfo(bestHitInfo, intersectPlane(ray, scene.planes[i], tMin, tMax));
	}

	return bestHitInfo;
}

vec3 shadeFromLight(
	const Scene scene,
	const Ray ray,
	const HitInfo hitInfo,
	const PointLight light)
{ 
	vec3 hitToLight = light.position - hitInfo.position;

	vec3 lightDirection = normalize(hitToLight);
	vec3 viewDirection = normalize(hitInfo.position - ray.origin);
	vec3 reflectedDirection = reflect(viewDirection, hitInfo.normal);
	float diffuse_term = max(0.0, dot(lightDirection, hitInfo.normal));
	float specular_term  = pow(max(0.0, dot(lightDirection, reflectedDirection)), hitInfo.material.glossiness);
	//SHADOW TESTS
	Ray shadowRay=Ray((hitInfo.position+0.001),lightDirection);//create a shadow ray extending in light ray direction
	HitInfo shadowhit=intersectScene(scene, shadowRay, 0.001, 10000.0);//check shadow ray's interaction with the scene
	float visibility=0.1;
	if(!shadowhit.hit){
		visibility=1.0;
	}//if shadow exiSts then low visibility and visibility 1 if shadow ray doesn't hit object
	//a common error in shadow cases is that shadowRay is created from hitposition as origin which causes intersection with the object itself instead of the object it hits. So we add a factor of 0.001 to the ray origin so that the shadow doesn't intersect from the object causing the shadow
	
	Ray mirrorRay;
	mirrorRay.origin = hitInfo.position;
	mirrorRay.direction = reflect(lightDirection, hitInfo.normal);
	HitInfo mirrorHitInfo = intersectScene(scene, mirrorRay, 0.001, 100000.0);

	return 	visibility * 
		light.color * (
			specular_term * hitInfo.material.specular +
			diffuse_term * hitInfo.material.diffuse);
}

vec3 background(const Ray ray) {
	// A simple implicit sky that can be used for the background
	return vec3(0.2) + vec3(0.8, 0.6, 0.5) * max(0.0, ray.direction.y);
}

// It seems to be a WebGL issue that the third parameter needs to be inout instea dof const on Tobias' machine
vec3 shade(const Scene scene, const Ray ray, inout HitInfo hitInfo) {

	if(!hitInfo.hit) {
		return background(ray);
	}

	vec3 shading = scene.ambient * hitInfo.material.diffuse;
	for (int i = 0; i < lightCount; ++i) {
		shading += shadeFromLight(scene, ray, hitInfo, scene.lights[i]); 
	}
	return shading;
}

uniform vec2 g_resolution;

Ray getFragCoordRay(const vec2 frag_coord) {
	float sensorDistance = 1.0;
	vec2 sensorMin = vec2(-1, -0.5);
	vec2 sensorMax = vec2(1, 0.5);
	vec2 pixelSize = (sensorMax- sensorMin) / vec2(g_resolution.x, g_resolution.y);
	vec3 origin = vec3(0, 0, sensorDistance);
	vec3 direction = normalize(vec3(sensorMin + pixelSize * frag_coord, -sensorDistance));  

	return Ray(origin, direction);
}

//fresnel effect describes how refraction and reflection of a ray through an object media are calculated
//a ray's reflection and refraction percentage are weighted by fresnel coefficient and these coefficients are approximated by various methods
//a ray's transmission and reflection also depends on the angle on which it falls on the object.
//the bigger the angle of incidence the more the ray is reflected and less percentage is transmitted
//below is an empirical approximation of the Fresnel effect and has been studied about from http://developer.download.nvidia.com/CgTutorial/cg_tutorial_chapter07.html 

float fresnel(const vec3 viewDirection, const vec3 normal) {
	float bias=0.0;
	float scale=0.1;
	float power=1.5;
	float fres=bias+scale*pow(1.0-dot(viewDirection,normal),power);
	fres=clamp(fres,0.0,1.0);
return fres;
}

vec3 colorForFragment(const Scene scene, const vec2 fragCoord) {

	Ray initialRay = getFragCoordRay(fragCoord);  
	HitInfo initialHitInfo = intersectScene(scene, initialRay, 0.001, 10000.0);  
	vec3 result = shade(scene, initialRay, initialHitInfo);

	Ray currentRay;
	HitInfo currentHitInfo;

	// Compute the reflection
	currentRay = initialRay;
	currentHitInfo = initialHitInfo;

	// The initial strength of the reflection
	float reflectionWeight = 1.0;

	const int maxReflectionStepCount = 2;
	for(int i = 0; i < maxReflectionStepCount; i++) {

		if(!currentHitInfo.hit) break;
         
		 if(currentHitInfo.material.glossiness>0.1){
		//if material is glossy reflect off of it, this was done to prevent paper from reflecting
	    //material class was extended to hold Index of refraction and transmittance to check for refracted ray
		 vec3 reflectedDirection = currentRay.direction-(currentHitInfo.normal*(2.0*(dot(currentRay.direction,currentHitInfo.normal))));
		reflectionWeight *= 0.3;
		Ray nextRay=Ray(currentHitInfo.position,reflectedDirection);
			 
	    float fres=fresnel(-initialRay.direction,initialHitInfo.normal);
		currentRay = nextRay;
		currentHitInfo = intersectScene(scene, currentRay, 0.001, 10000.0); 
			 			 
		result += fres * shade(scene, currentRay, currentHitInfo);//fresnel reflection coefficient
	}
	}

	// Compute the refraction
	currentRay = initialRay;  
	currentHitInfo = initialHitInfo;

	// The initial medium is air
	float currentIOR = 1.0;

	// The initial strength of the refraction.
	float refractionWeight = 1.0;

	const int maxRefractionStepCount = 2;
	for(int i = 0; i < maxRefractionStepCount; i++) {
		if(!currentHitInfo.hit) break;
		
		if(currentHitInfo.material.transmittance>0.0){
			
			float newIOR=1.3;//IOR of glass 
			float r=currentIOR/newIOR;
			vec3 refractedDirection=(r*(currentRay.direction-(dot(currentRay.direction,currentHitInfo.normal)*currentHitInfo.normal)))-(currentHitInfo.normal*sqrt(1.0-((r*r)*(1.0-(dot(currentRay.direction,currentHitInfo.normal)*dot(currentRay.direction,currentHitInfo.normal))))));
			Ray nextRay= Ray(currentHitInfo.position,refractedDirection);
			float fres=fresnel(-initialRay.direction,initialHitInfo.normal);
			currentRay=nextRay;
			currentHitInfo = intersectScene(scene, currentRay, 0.001, 10000.0);
			result += (1.0-fres)* shade(scene, currentRay, currentHitInfo);//(1-fresnel coefficient) for refraction

		}
	}
	return result;
}

//Materials are defined by their diffuse colour i.e. a general colour, specularity and their glossiness
//an objects general colour and visibility is described by their diffuse term
//specularity basically describes an object's shininess
//glossiness describes how smooth, shiny and lustrous an object is


Material getDefaultMaterial() {
	return Material(vec3(0.3), vec3(0), 1.0,0.0,0.0);

}

Material getPaperMaterial() {
	return Material(vec3(0.7),vec3(0.0),0.00001,0.0,0.0);
}//diffuse closer to white, specularity 0 since no shine, minimal glossiness to remove the black noise, IOR not required as object doesn't transmit

Material getPlasticMaterial() {
	return Material(vec3(1.0,0.7,0.3),vec3(1.5),16.0,0.0,0.0);
}//diffuse colour close to orangish yellow, high specularity and glossiness, IOR not required as object doesn't transmit

Material getGlassMaterial() {
	return Material(vec3(0.0),vec3(0.0),20.0,1.0,1.3);
}// no colour, no specularity, high glossiness, object is transparent with IOR 1.3

Material getSteelMirrorMaterial() {
	return Material(vec3(0.09),vec3(1.0),20.0,0.0,0.0);
}//colour close to gray, with specularity and high glossiness, IOR not required as object doesn't transmit

vec3 tonemap(const vec3 radiance) {
	const float monitorGamma = 2.0;
	return pow(radiance, vec3(1.0 / monitorGamma));
}

void main()
{
	// Setup scene
	Scene scene;
	scene.ambient = vec3(0.12, 0.15, 0.2);

	// Lights
	scene.lights[0].position = vec3(5, 15, -5);
	scene.lights[0].color    = 0.5 * vec3(0.1, 0.2, 1.0);

	scene.lights[1].position = vec3(-15, 5, 2);
	scene.lights[1].color    = 0.5 * vec3(0.9, 0.5, 0.1);

	// Primitives
	scene.spheres[0].position            	= vec3(10, -5, -16);
	scene.spheres[0].radius              	= 6.0;
	scene.spheres[0].material 				= getPaperMaterial();

	scene.spheres[1].position            	= vec3(-8, -1, -13);
	scene.spheres[1].radius             	= 4.0;
	scene.spheres[1].material				= getPlasticMaterial();

	scene.spheres[2].position            	= vec3(0, 0.5, -5);
	scene.spheres[2].radius              	= 2.0;
	scene.spheres[2].material   			= getGlassMaterial();

	scene.planes[0].normal            		= vec3(0, 1, 0);
	scene.planes[0].d              			= 4.5;
	scene.planes[0].material				= getSteelMirrorMaterial();

	scene.cylinders[0].position            	= vec3(-1, 1, -18);
	scene.cylinders[0].direction            = normalize(vec3(1, 2, -1));
	scene.cylinders[0].radius         		= 1.5;
	scene.cylinders[0].material				= getPaperMaterial();

	scene.cylinders[1].position            	= vec3(4, 1, -5);
	scene.cylinders[1].direction            = normalize(vec3(1, -4, 1));
	scene.cylinders[1].radius         		= 0.4;
	scene.cylinders[1].material				= getPlasticMaterial();

	// Compute color for fragment
	gl_FragColor.rgb = tonemap(colorForFragment(scene, gl_FragCoord.xy));
	gl_FragColor.a = 1.0;
}

`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	UI.tabs.push(
		{
		visible: false,
		type: `x-shader/x-vertex`,
		title: `RaytracingDemoVS - GL`,
		id: `RaytracingDemoVS`,
		initialValue: `attribute vec3 position;
    uniform mat4 modelViewMatrix;
    uniform mat4 projectionMatrix;
  
    void main(void) {
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }
`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	 return UI; 
}//!setup

var gl;
function initGL(canvas) {
	try {
		gl = canvas.getContext("experimental-webgl");
		gl.viewportWidth = canvas.width;
		gl.viewportHeight = canvas.height;
	} catch (e) {
	}
	if (!gl) {
		alert("Could not initialise WebGL, sorry :-(");
	}
}

function getShader(gl, id) {
	var shaderScript = document.getElementById(id);
	if (!shaderScript) {
		return null;
	}

	var str = "";
	var k = shaderScript.firstChild;
	while (k) {
		if (k.nodeType == 3) {
			str += k.textContent;
		}
		k = k.nextSibling;
	}

	var shader;
	if (shaderScript.type == "x-shader/x-fragment") {
		shader = gl.createShader(gl.FRAGMENT_SHADER);
	} else if (shaderScript.type == "x-shader/x-vertex") {
		shader = gl.createShader(gl.VERTEX_SHADER);
	} else {
		return null;
	}

    console.log(str);
	gl.shaderSource(shader, str);
	gl.compileShader(shader);

	if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
		alert(gl.getShaderInfoLog(shader));
		return null;
	}

	return shader;
}

function RaytracingDemo() {
}

RaytracingDemo.prototype.initShaders = function() {

	this.shaderProgram = gl.createProgram();

	gl.attachShader(this.shaderProgram, getShader(gl, "RaytracingDemoVS"));
	gl.attachShader(this.shaderProgram, getShader(gl, "RaytracingDemoFS"));
	gl.linkProgram(this.shaderProgram);

	if (!gl.getProgramParameter(this.shaderProgram, gl.LINK_STATUS)) {
		alert("Could not initialise shaders");
	}

	gl.useProgram(this.shaderProgram);

	this.shaderProgram.vertexPositionAttribute = gl.getAttribLocation(this.shaderProgram, "position");
	gl.enableVertexAttribArray(this.shaderProgram.vertexPositionAttribute);

	this.shaderProgram.projectionMatrixUniform = gl.getUniformLocation(this.shaderProgram, "projectionMatrix");
	this.shaderProgram.modelviewMatrixUniform = gl.getUniformLocation(this.shaderProgram, "modelViewMatrix");
}

RaytracingDemo.prototype.initBuffers = function() {
	this.triangleVertexPositionBuffer = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, this.triangleVertexPositionBuffer);
	
	var vertices = [
		 -1,  -1,  0,
		 -1,  1,  0,
		 1,  1,  0,

		 -1,  -1,  0,
		 1,  -1,  0,
		 1,  1,  0,
	 ];
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
	this.triangleVertexPositionBuffer.itemSize = 3;
	this.triangleVertexPositionBuffer.numItems = 3 * 2;
}

RaytracingDemo.prototype.drawScene = function() {
			
	var perspectiveMatrix = new J3DIMatrix4();	
	perspectiveMatrix.setUniform(gl, this.shaderProgram.projectionMatrixUniform, false);

	var modelViewMatrix = new J3DIMatrix4();	
	modelViewMatrix.setUniform(gl, this.shaderProgram.modelviewMatrixUniform, false);
		
	gl.bindBuffer(gl.ARRAY_BUFFER, this.triangleVertexPositionBuffer);
	gl.vertexAttribPointer(this.shaderProgram.vertexPositionAttribute, this.triangleVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
	
	gl.uniform2iv(gl.getUniformLocation(this.shaderProgram, "viewport"), [getRenderTargetWidth(), getRenderTargetHeight()]);
	
	gl.drawArrays(gl.TRIANGLES, 0, this.triangleVertexPositionBuffer.numItems);
}

RaytracingDemo.prototype.run = function() {
	this.initShaders();
	this.initBuffers();

	gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
	gl.clear(gl.COLOR_BUFFER_BIT);

	this.drawScene();
};

function init() {	
	

	env = new RaytracingDemo();	
	env.run();

    return env;
}

function compute(canvas)
{
    env.initShaders();
    env.initBuffers();

    gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
    gl.clear(gl.COLOR_BUFFER_BIT);

    env.drawScene();
}

